
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##########################################
> # Coliphage analysis - 6 beaches
> # v1 by Jade 7/13/15
> 
> # This file makes a table with regression output
> # For a table with the combined and interaction
> # results for body immersion
> 
> # Single & joint indicators
> ##########################################
> 
> 
> rm(list=ls())
> 
> setwd("~/Dropbox/Coliphage/")  
> 
> load("results/rawoutput/regress-10day-body.Rdata")
> load("results/rawoutput/regress-10day-body-entero.Rdata")
> load("~/dropbox/coliphage/results/rawoutput/regress-10day-body-joint.Rdata")
> 
> # ------------------------------------------------
> # combine output
> # ------------------------------------------------
> 
> # n's --------------------------------------------
> gici10.n.body.pool=c(all.n10.fmc1601,all.n10.fmc1602,
+                      all.n10.fpc1601,all.n10.fpc1602)
> 
> gici10.n.body.high=c(all.n10.fmc1602.high,
+                      all.n10.fpc1601.high,all.n10.fpc1602.high)
> 
> gici10.n.body.low=c(all.n10.fmc1602.low,
+                     all.n10.fpc1601.low,all.n10.fpc1602.low)
> 
> # add comma
> gici10.n.body.pool=format(gici10.n.body.pool,scientific=FALSE,big.mark=",")
> gici10.n.body.high=format(gici10.n.body.high,scientific=FALSE,big.mark=",")
> gici10.n.body.low=format(gici10.n.body.low,scientific=FALSE,big.mark=",")
> 
> # entero n's  --------------------------------------------
> 
> entero.n.body.pool=c(n10.entero35.fmc1601,n10.entero35.fmc1602,
+                      n10.entero35.fpc1601,n10.entero35.fpc1602)
> 
> entero.n.body.high=c(n10.entero35.fmc1602.high,n10.entero35.fpc1601.high,
+                      n10.entero35.fpc1602.high)
> 
> entero.n.body.low=c(n10.entero35.fmc1602.low,n10.entero35.fpc1601.low,
+                     n10.entero35.fpc1602.low)
> 
> # add comma
> entero.n.body.pool=format(entero.n.body.pool,scientific=FALSE,big.mark=",")
> entero.n.body.high=format(entero.n.body.high,scientific=FALSE,big.mark=",")
> entero.n.body.low=format(entero.n.body.low,scientific=FALSE,big.mark=",")
> 
> # joint n's --------------------------------------------
> gici10.n.joint=c(all.n10.fmc1601.joint,all.n10.fmc1602.joint,
+                  all.n10.fpc1601.joint,all.n10.fpc1602.joint)
> 
> gici10.n.joint.high=c(all.n10.fmc1602.high.joint,
+                       all.n10.fpc1601.high.joint,all.n10.fpc1602.high.joint)
> 
> gici10.n.joint.low=c(all.n10.fmc1602.low.joint,
+                      all.n10.fpc1601.low.joint,all.n10.fpc1602.low.joint)
> 
> # add comma
> gici10.n.joint=format(gici10.n.joint,scientific=FALSE,big.mark=",")
> gici10.n.joint.high=format(gici10.n.joint.high,scientific=FALSE,big.mark=",")
> gici10.n.joint.low=format(gici10.n.joint.low,scientific=FALSE,big.mark=",")
> 
> # single indicator estimates --------------------------------------------
> gici10.body.pool=list(overall.fit10.fmc1601, overall.fit10.fmc1602,
+                       overall.fit10.fpc1601, overall.fit10.fpc1602)
> 
> gici10.body.pool.high=list(overall.fit10.fmc1602.high,
+                            overall.fit10.fpc1601.high, overall.fit10.fpc1602.high)
> 
> gici10.body.pool.low=list(overall.fit10.fmc1602.low,
+                           overall.fit10.fpc1601.low, overall.fit10.fpc1602.low)
> 
> # entero estimates  --------------------------------------------
> 
> gici10.entero.pool=list(overall.fit10.entero.fmc1601,overall.fit10.entero.fmc1602,
+                         overall.fit10.entero.fpc1601,overall.fit10.entero.fpc1602)
> gici10.entero.high=list(overall.fit10.entero.high.fmc1602,overall.fit10.entero.high.fpc1601,
+                         overall.fit10.entero.high.fpc1602)
> gici10.entero.low=list(overall.fit10.entero.low.fmc1602,overall.fit10.entero.low.fpc1601,
+                        overall.fit10.entero.low.fpc1602)
> 
> 
> # joint indicator estimates  --------------------------------------------
> gici10.joint.int=list(overall.fit10.fmc1601.int, overall.fit10.fmc1602.int,
+                       overall.fit10.fpc1601.int, overall.fit10.fpc1602.int)
> 
> gici10.joint.high.int=list(overall.fit10.fmc1602.high.int,
+                            overall.fit10.fpc1601.high.int, overall.fit10.fpc1602.high.int)
> 
> gici10.joint.low.int=list(overall.fit10.fmc1602.low.int,
+                           overall.fit10.fpc1601.low.int, overall.fit10.fpc1602.low.int)
> 
> 
> # ------------------------------------------------
> # function to make table row with exponentiated point estimate
> # and 95% ci in parentheses
> # ------------------------------------------------
> mkrow.pool=function(out){
+   pt.est=out[2,1]
+   lb=pt.est-qnorm(.975)*out[2,2]
+   ub=pt.est+qnorm(.975)*out[2,2]
+   paste(sprintf("%0.2f",exp(pt.est))," (",
+         sprintf("%0.2f",exp(lb)),",",
+         sprintf("%0.2f",exp(ub)), ")",sep="")
+ }
> 
> mkrow.joint=function(out){
+   row=grep("ent4",rownames(out))
+   pt.est=out[row,1]
+   lb=pt.est-qnorm(.975)*out[4,2]
+   ub=pt.est+qnorm(.975)*out[4,2]
+   paste(sprintf("%0.2f",exp(pt.est))," (",
+         sprintf("%0.2f",exp(lb)),",",
+         sprintf("%0.2f",exp(ub)), ")",sep="")
+ }
> 
> # ------------------------------------------------
> # convert results into table format
> # pooled results
> # ------------------------------------------------
> # single indicator results
> gici10.tab.body.pool=data.frame(combined=unlist(lapply(gici10.body.pool,mkrow.pool)))
> gici10.tab.body.pool.high=data.frame(combined=unlist(lapply(gici10.body.pool.high,mkrow.pool)))
> gici10.tab.body.pool.low=data.frame(combined=unlist(lapply(gici10.body.pool.low,mkrow.pool)))
> 
> gici10.tab.body.pool.high$combined=as.character(gici10.tab.body.pool.high$combined)
> gici10.tab.body.pool.high=rbind("",gici10.tab.body.pool.high)
> gici10.tab.body.pool.low$combined=as.character(gici10.tab.body.pool.low$combined)
> gici10.tab.body.pool.low=rbind("",gici10.tab.body.pool.low)
> 
> gici10.tab=data.frame(cbind(gici10.n.body.pool,gici10.tab.body.pool,
+                             c("",gici10.n.body.low),gici10.tab.body.pool.low,
+                             c("",gici10.n.body.high),gici10.tab.body.pool.high))
> colnames(gici10.tab)=NULL
> gici10.tab[,1]=as.character(gici10.tab[,1])
> gici10.tab[,2]=as.character(gici10.tab[,2])
> gici10.tab[,3]=as.character(gici10.tab[,3])
> gici10.tab[,4]=as.character(gici10.tab[,4])
> gici10.tab[,5]=as.character(gici10.tab[,5])
> gici10.tab[,6]=as.character(gici10.tab[,6])
> 
> # entero results
> entero.tab.pool=data.frame(combined=unlist(lapply(gici10.entero.pool,mkrow.pool)))
> entero.tab.high=data.frame(combined=unlist(lapply(gici10.entero.high,mkrow.pool)))
> entero.tab.high$combined=as.character(entero.tab.high$combined)
> entero.tab.high=rbind("",entero.tab.high)
> entero.tab.low=data.frame(combined=unlist(lapply(gici10.entero.low,mkrow.pool)))
> entero.tab.low$combined=as.character(entero.tab.low$combined)
> entero.tab.low=rbind("",entero.tab.low)
> 
> entero.tab=data.frame(cbind(entero.n.body.pool,entero.tab.pool,
+                             c("",entero.n.body.low),entero.tab.low,
+                             c("",entero.n.body.high),entero.tab.high))
> colnames(entero.tab)=NULL
> entero.tab[,1]=as.character(entero.tab[,1])
> entero.tab[,2]=as.character(entero.tab[,2])
> entero.tab[,3]=as.character(entero.tab[,3])
> entero.tab[,4]=as.character(entero.tab[,4])
> entero.tab[,5]=as.character(entero.tab[,5])
> entero.tab[,6]=as.character(entero.tab[,6])
> 
> # joint results
> joint.tab.pool=data.frame(combined=unlist(lapply(gici10.joint.int,mkrow.joint)))
> joint.tab.high=data.frame(combined=unlist(lapply(gici10.joint.high.int,mkrow.joint)))
> joint.tab.high$combined=as.character(joint.tab.high$combined)
> joint.tab.high=rbind("",joint.tab.high)
> joint.tab.low=data.frame(combined=unlist(lapply(gici10.joint.low.int,mkrow.joint)))
> joint.tab.low$combined=as.character(joint.tab.low$combined)
> joint.tab.low=rbind("",joint.tab.low)
> 
> joint.tab=data.frame(cbind(gici10.n.joint,joint.tab.pool,
+                             c("",gici10.n.joint.low),joint.tab.low,
+                             c("",gici10.n.joint.high),joint.tab.high))
> colnames(joint.tab)=NULL
> joint.tab[,1]=as.character(joint.tab[,1])
> joint.tab[,2]=as.character(joint.tab[,2])
> joint.tab[,3]=as.character(joint.tab[,3])
> joint.tab[,4]=as.character(joint.tab[,4])
> joint.tab[,5]=as.character(joint.tab[,5])
> joint.tab[,6]=as.character(joint.tab[,6])
> 
> colnames(gici10.tab)=c("npool","pool","nlow","low","nhigh","high")
> colnames(entero.tab)=c("npool","pool","nlow","low","nhigh","high")
> colnames(joint.tab)=c("npool","pool","nlow","low","nhigh","high")
> 
> gici10.tab.out=rbind(gici10.tab[1,],entero.tab[1,],joint.tab[1,],
+                      gici10.tab[2,],entero.tab[2,],joint.tab[2,],
+                      gici10.tab[3,],entero.tab[3,],joint.tab[3,],
+                      gici10.tab[4,],entero.tab[4,],joint.tab[4,])
> 
> lab=c(rep(c("Coliphage detected","Enterococcus > 35 CFU/100 ml",
+           "Coliphage detected $\\&$ Enterococcus > 35 CFU/100 ml"),4))
> gici10.tab.out=cbind(lab,gici10.tab.out)
> 
> rownames(gici10.tab.out)=NULL
> 
> save(gici10.tab.out,file="~/Dropbox/Coliphage/Results/Tables/CIR-10.RData")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.223   0.031   0.268 
